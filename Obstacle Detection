#include <NewPing.h>

#define TRIG_PIN 11
#define ECHO_PIN 12
#define MOTOR_A1 5
#define MOTOR_A2 6
#define MOTOR_B1 7
#define MOTOR_B2 8
#define PWM_A 9
#define PWM_B 10

#define MAX_DISTANCE 200 // Maximum distance to check for obstacles in centimeters
#define MIN_DISTANCE 20  // Minimum distance to trigger obstacle avoidance in centimeters
#define BACKWARD_SPEED 150
#define TURN_SPEED 200

NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE);

void setup() {
  pinMode(MOTOR_A1, OUTPUT);
  pinMode(MOTOR_A2, OUTPUT);
  pinMode(MOTOR_B1, OUTPUT);
  pinMode(MOTOR_B2, OUTPUT);
  pinMode(PWM_A, OUTPUT);
  pinMode(PWM_B, OUTPUT);
}

void loop() {
  int distance = sonar.ping_cm();
  
  if (distance > MIN_DISTANCE && distance < MAX_DISTANCE) {
    // Move forward if no obstacle is detected
    moveForward();
  } else {
    // Obstacle detected, stop and turn
    stopMotors();
    delay(500);
    
    // Move backward
    moveBackward();
    delay(1000);
    
    // Turn right
    turnRight();
    delay(1000);
  }
}

void moveForward() {
  digitalWrite(MOTOR_A1, HIGH);
  digitalWrite(MOTOR_A2, LOW);
  analogWrite(PWM_A, 255);

  digitalWrite(MOTOR_B1, HIGH);
  digitalWrite(MOTOR_B2, LOW);
  analogWrite(PWM_B, 255);
}

void moveBackward() {
  digitalWrite(MOTOR_A1, LOW);
  digitalWrite(MOTOR_A2, HIGH);
  analogWrite(PWM_A, BACKWARD_SPEED);

  digitalWrite(MOTOR_B1, LOW);
  digitalWrite(MOTOR_B2, HIGH);
  analogWrite(PWM_B, BACKWARD_SPEED);
}

void turnRight() {
  digitalWrite(MOTOR_A1, HIGH);
  digitalWrite(MOTOR_A2, LOW);
  analogWrite(PWM_A, TURN_SPEED);

  digitalWrite(MOTOR_B1, LOW);
  digitalWrite(MOTOR_B2, HIGH);
  analogWrite(PWM_B, TURN_SPEED);
}

void stopMotors() {
  digitalWrite(MOTOR_A1, LOW);
  digitalWrite(MOTOR_A2, LOW);
  digitalWrite(MOTOR_B1, LOW);
  digitalWrite(MOTOR_B2, LOW);
  analogWrite(PWM_A, 0);
  analogWrite(PWM_B, 0);
}
